package cn.edu.buaa.act.sdp.malwaredetector.services;

import android.app.ActivityManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.IBinder;
import android.util.Log;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import cn.edu.buaa.act.sdp.malwaredetector.Constant;
import cn.edu.buaa.act.sdp.malwaredetector.util.AppLog;
import cn.edu.buaa.act.sdp.malwaredetector.util.FileUtils;

public class StraceService extends Service {
    private int pid = 15115;

    public StraceService() {
    }

    public StraceService(int pid) {
        this.pid = getCurProcessId(this);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        pid = getCurProcessId(this);

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                try {
                    FileUtils.generateFolder();
                    Process process = Runtime.getRuntime().exec("su");
                    DataOutputStream os = new DataOutputStream(process.getOutputStream());
                    os.writeBytes(String.format("strace -c -o /sdcard/MalwareDetector/%dlog.txt -p %d\n", pid, pid));
                    os.flush();

                    readProcessOutput(process);

//                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
//                    String line;
//                    while ((line = reader.readLine()) != null) {
//                        Log.d("yao", line);
//                    }
//                    reader.close();
//                    BufferedReader readerError = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    String error;
//                    while ((error = readerError.readLine()) != null) {
////                        Log.d("yao", "error: " + error);
//                        AppLog.log(Constant.TAG, error, 'd', pid + ".txt");
//                    }
//                    readerError.close();
                    try {
                        Thread.sleep(10000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
//                    os.writeBytes("ps | grep strace");
//                    os.flush();
//                    readProcessOutput(process);

                    int exitValue = process.waitFor();
                    Log.d("yao", "exitValued: " + exitValue);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                return null;
            }
        }.execute();

//        List<ActivityManager.RunningAppProcessInfo> processList = ApplicationManager.getRunningAppProcessInfo(this);

//        for(ActivityManager.RunningAppProcessInfo info : processList) {
//            AppLog.log(Constant.TAG, info.processName + " : " +  info.pid, 'd', "process.txt");
//        }

//        try {
//            FileUtils.generateFolder();
//            Process process = Runtime.getRuntime().exec("su");
//            DataOutputStream os = new DataOutputStream(process.getOutputStream());
//            os.writeBytes(String.format("strace -c -o /sdcard/MalwareDetector/%dlog.txt -p %d\n", pid, pid));
//            os.flush();
//
//            readProcessOutput(process);
//
////            try {
////                Thread.sleep(10000);
////            } catch (InterruptedException e) {
////                e.printStackTrace();
////            }
////            os.writeBytes("ps | grep strace");
////            os.flush();
////            readProcessOutput(process);
//
////            int exitValue = process.waitFor();
////            Log.d("yao", "exitValued: " + exitValue);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

    }

    public void readProcessOutput(Process process) {
//        read(process.getInputStream());
        read(process.getErrorStream());
    }

    private void read(InputStream inputStream) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            while((line = reader.readLine()) != null) {
                Log.d("yao", line);
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                inputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void sendCtrlC(int processID) {
        AppLog.log(Constant.TAG, "Sending Ctrl+C to pid " + processID, 'd', "send.txt");
        try {
            Process process = Runtime.getRuntime().exec("cmd /c ext\\SendingSingalC.exe");

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    int getCurProcessId(Context context) {
        int pid = android.os.Process.myPid();
        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        for(ActivityManager.RunningAppProcessInfo info : manager.getRunningAppProcesses()) {
            if(info.pid == pid) {
                return info.pid;
            }
        }
        return -1;
    }

    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        throw new UnsupportedOperationException("Not yet implemented");
    }
}

//                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
//                    String line;
//                    while ((line = reader.readLine()) != null) {
//                        Log.d("yao", line);
//                    }
//                    reader.close();
//                    BufferedReader readerError = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    String error;
//                    while ((error = readerError.readLine()) != null) {
////                        Log.d("yao", "error: " + error);
//                        AppLog.log(Constant.TAG, error, 'd', pid + ".txt");
//                    }
//                    readerError.close();

